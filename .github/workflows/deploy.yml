name: Deploy to K3s

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README.md'
      - '.github/workflows/ci.yml'
      - 'tests/**'
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 设置超时时间
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # 只获取最新提交，减少下载时间

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0
        buildkitd-flags: --debug

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=La-Mian
          org.opencontainers.image.description=拉面餐厅应用

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64  # 只构建 amd64 平台，减少构建时间
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # 临时禁用缓存以解决 GitHub 服务问题
        # cache-from: type=gha,scope=la-mian
        # cache-to: type=gha,mode=max,scope=la-mian
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        
        # 验证 kubeconfig
        echo "🔍 验证 kubeconfig 配置..."
        kubectl config view --minify
        
        # 测试连接（跳过 TLS 验证）
        echo "🔗 测试集群连接..."
        kubectl cluster-info --insecure-skip-tls-verify || {
          echo "❌ 集群连接失败"
          echo "📋 请检查以下内容:"
          echo "1. KUBE_CONFIG Secret 是否正确"
          echo "2. K3s 服务器是否运行"
          echo "3. 网络连接是否正常"
          exit 1
        }

    - name: Deploy to K3s
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        echo "🚀 开始部署..."
        
        # 创建命名空间（如果不存在）
        kubectl create namespace la-mian --dry-run=client -o yaml | kubectl apply -f --insecure-skip-tls-verify
        
        # 检查部署是否存在
        if kubectl get deployment la-mian-app -n la-mian --insecure-skip-tls-verify 2>/dev/null; then
          echo "📦 更新现有部署..."
          kubectl set image deployment/la-mian-app la-mian=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -n la-mian --insecure-skip-tls-verify
        else
          echo "📦 创建新部署..."
          kubectl apply -f k8s-deployment.yaml --insecure-skip-tls-verify
        fi
        
        # 等待部署完成
        echo "⏳ 等待部署完成..."
        kubectl rollout status deployment/la-mian-app -n la-mian --timeout=120s --insecure-skip-tls-verify
        
        # 检查部署状态
        echo "📊 部署状态:"
        kubectl get pods -n la-mian --insecure-skip-tls-verify

    - name: Notify deployment status
      if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          🚀 Deployment Status: ${{ job.status }}
          
          📦 Repository: ${{ github.repository }}
          🔄 Branch: ${{ github.ref_name }}
          📝 Commit: ${{ github.sha }}
          
          🌐 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          📊 Status: ${{ job.status }}
          ⏱️ Duration: ${{ job.steps.*.duration }} 